{"is_source_file": true, "format": "TypeScript React component (.tsx)", "description": "This file defines a React component called StepCard, which renders a video player with custom controls, including loading states, progress bar, fullscreen toggle, and thumbnail overlay. It also includes related interfaces, constants, and helper components for loading animations and accordion items. The component manages video loading, preloading, buffering, and playback state, and references external libraries such as framer-motion, next/image, and lucide-react.", "external_files": ["react", "framer-motion", "next/image", "lucide-react"], "external_methods": ["useState", "useRef", "useEffect", "useCallback"], "published": ["StepCard"], "classes": [], "methods": [{"name": "loadVideoInBackground", "description": "Loads a video from a URL in background using XMLHttpRequest, tracks progress, and returns a Blob promise."}, {"name": "useEffect (initial video loading)", "description": "Loads all videos in the steps array into cache or blob URLs on component mount, and cleans up on unmount."}, {"name": "useEffect (preloading videos)", "description": "Preloads all videos when component mounts, creating blob URLs for faster subsequent access, and revokes URLs on cleanup."}, {"name": "cleanupVideoResources", "description": "Pauses and resets the video element, and resets playback state variables."}, {"name": "handleMouseUp", "description": "Handles mouse up event for dragging the progress bar, resumes playback if paused."}, {"name": "handleMouseMove", "description": "Handles mouse move event for dragging the progress bar, updates currentTime and buffered state."}, {"name": "handleGlobalPlay", "description": "Pauses other videos when a new video starts playing to ensure only one plays at a time."}, {"name": "isExternalUrl", "description": "Checks if a URL is external (not same origin)."}, {"name": "loadVideoWithProgress", "description": "Loads a video via XMLHttpRequest, tracks progress, and sets video source, with fallback for CORS issues."}, {"name": "useEffect (video source change)", "description": "Updates video source when currentVideoUrl changes, using preloaded blob URL if available."}, {"name": "useEffect (step change)", "description": "Resets playback and loading states when the step or video URL changes."}, {"name": "handleProgressBarClick", "description": "Handles click on progress bar to seek video to clicked position."}, {"name": "handleProgress", "description": "Updates buffered progress state based on video buffered end."}, {"name": "formatTime", "description": "Formats a time in seconds to 'minutes:seconds' string."}, {"name": "handlePlayPause", "description": "Toggles play/pause state of the video."}, {"name": "handleLoadedData", "description": "Handles video loaded data event, updates loading state and duration."}, {"name": "handleTimeUpdate", "description": "Updates currentTime and buffered state during video playback."}, {"name": "handleFullscreen", "description": "Enters fullscreen mode for the video and manages controls visibility."}, {"name": "handleVideoLoad", "description": "Handles video load event, updates loading state and duration."}, {"name": "handleVideoError", "description": "Handles errors during video loading, retries or sets error state."}, {"name": "retryVideoLoad", "description": "Retries loading the video after an error, with timeout fallback."}], "calls": ["document.querySelectorAll('video')", "URL.createObjectURL", "URL.revokeObjectURL", "videoRef.current.pause()", "videoRef.current.play()", "videoRef.current.load()", "videoRef.current.buffered", "videoRef.current.duration", "videoRef.current.currentTime", "videoRef.current.pause()", "videoRef.current.requestFullscreen()", "document.addEventListener", "document.removeEventListener"], "search-terms": ["React video player", "custom video controls", "video loading progress", "video preloading", "buffer management", "fullscreen toggle", "seek bar", "React useRef", "React useState", "React useEffect", "video Blob URL", "progress bar seeking", "video buffering", "video error handling"], "state": 2, "file_id": 629, "knowledge_revision": 1160, "git_revision": "cd7f9d4de20a02ad0bbc41d68321c1dac1fc2603", "ctags": [], "filename": "src/sections/ModularSolution/StepsCard copy 2.tsx", "hash": "fd585d7b133a4a0a090848988a4f586b", "format-version": 4, "code-base-name": "https://github.com/Kavia-ai/kavia-website-v2.git:main", "revision_history": [{"1160": "cd7f9d4de20a02ad0bbc41d68321c1dac1fc2603"}]}